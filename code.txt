import tensorflow
import math 
import pandas_datareader as web
import numpy as np
import pandas as pd 
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt
plt.style.use("fivethirtyeight")
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense,LSTM

import datetime as dt
import pandas_datareader as web

import datetime as dt
import yfinance as yf

company = 'AAPL'

# Define a start date and End Date
start = dt.datetime(2012,1,1)
end =  dt.datetime(2019,12,17)

# Read Stock Price Data 
data = yf.download(company, start , end)

data.head()

plt.figure(figsize=(16,8))
plt.title('closing price hist')
plt.plot(data['Close'])
plt.xlabel('Data',fontsize=18)
plt.ylabel('close price usd',fontsize=18)
plt.show()
df=data.copy()
df.head()
data=df.filter(["Close"])
dataset=data.values
dataset
#len of trainging data
train_len=math.ceil(len(dataset)*0.8)
train_len

scalar=MinMaxScaler(feature_range=(0,1))
scaled_data=scalar.fit_transform(dataset)
scaled_data

train_data=scaled_data[0:train_len,:]
X_train=[]
y_train=[]
for i in range(60,train_len):
  X_train.append(train_data[i-60:i,0])
  y_train.append(train_data[i,0])
  if i<=61:
    print(X_train)
    print(y_train)

x_train,y_train=np.array(X_train),np.array(y_train)
x_train=np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Build the lstm model
model=Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
#compilre the model
model.compile(optimizer='adam',loss='mean_squared_error')
model.fit(x_train,y_train,batch_size=1,epochs=1)

#create the testing dataset
#create a new array containg scaled data from values index 1543 to 2002
test_data=scaled_data[train_len-60:,:]
x_test=[]
y_test=dataset[train_len:,:]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#note y_test is not scaled here

#convert the data to a numpy array
x_test=np.array(x_test)

x_test=np.reshape(x_test,(x_test.shape[0],x_test.shape[1],1))

#model prediction
predicton=model.predict(x_test)
predicton=scalar.inverse_transform(predicton)

#evalute a model
#by getting the root mean square error
rmse=np.sqrt(np.mean(predicton-y_test)**2)
rmse

train=data[:train_len]
valid=data[train_len:]
valid['prediction']=predicton
valid

#final output graph
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('data',fontsize=18)
plt.ylabel('closing price usd',fontsize=18)
plt.plot(train['Close'])
plt.plot(valid[['Close','prediction']])
plt.legend(['Train','val','prediction'],loc='lower right')
plt.show()


